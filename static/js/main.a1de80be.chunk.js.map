{"version":3,"sources":["card.js","cardList.js","searchBox.js","scroll.js","errorBoudaries.js","App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundaries","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","serachField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a1de80be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'tachyons';\r\n\r\nfunction Card({id,name, email}) {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n    <img src={`https://robohash.org/${id}?200*200`} alt='Robot_image'></img>\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nfunction CardList({robots}){\r\n  return (\r\n    <div>\r\n        { robots.map((user,i)=>{\r\n            return(\r\n                <Card \r\n                key={i} \r\n                id={user.id}\r\n                name={user.name}\r\n                email={user.email}\r\n                />\r\n            );\r\n            })\r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\nfunction SearchBox({searchChange}) {\r\n  return (\r\n    <div className ='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='serach robots' \r\n        onChange ={searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nfunction Scroll(props) {\r\n  return(\r\n      <div style={{ overflowY:'scroll', border:'1px solid black', height:'500px' }}>\r\n          {props.children}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass ErrorBoundaries extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state ={\r\n          hasError:false\r\n      }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({\r\n            hasError:true\r\n        });\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return (<h1>On NO, Thats not good!</h1>);\r\n        }\r\n        return(this.props.children);\r\n    }\r\n  \r\n}\r\n\r\nexport default ErrorBoundaries;","import React from 'react';\r\nimport CardList from './cardList'\r\nimport SearchBox from './searchBox'\r\nimport Scroll from './scroll'\r\nimport ErrorBoundaries from \"./errorBoudaries\";\r\nimport { connect } from 'react-redux';\r\nimport {setSerachField , requestRobots} from './Actions'\r\nimport 'tachyons';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    serachField : state.searchRobots.serachField,\r\n    isPending :state.requestRobots.isPending,\r\n    robots :state.requestRobots.robots,\r\n    error :state.requestRobots.error\r\n\r\n  }\r\n}\r\n \r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSerachField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n\r\n  render(){ \r\n    const { serachField, onSearchChange, robots , isPending} = this.props;\r\n    const filteredRobots = robots.filter((robot)=>{\r\n      return robot.name.toLowerCase().includes(serachField.toLowerCase());\r\n    });\r\n    if(isPending){\r\n      return <h1>LOADING</h1>\r\n    }else{\r\n      return (\r\n        <div className='tc'>\r\n          <h1>RobotFriends</h1>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundaries>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundaries>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAIL, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './Constants';\r\n\r\nexport const setSerachField = (text) =>({\r\n    type: CHANGE_SEARCH_FIELD ,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = ()=>(dispatch) =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch(\r\n        { type: REQUEST_ROBOTS_SUCCESS,\r\n            payload: data\r\n        } ))\r\n    .catch(err => dispatch({\r\n        type:REQUEST_ROBOTS_FAIL,\r\n        payload:err\r\n    }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAIL, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './Constants';\r\n\r\n\r\nconst initialStateSearch ={\r\n    serachField : ''\r\n}\r\n\r\nconst initialStateRobots ={\r\n    isPending : false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) =>{\r\n\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state , {serachField: action.payload});\r\n        \r\n        default :\r\n        return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) =>{\r\n\r\n    switch(action.type){\r\n\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state , {isPending: true});\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state , {robots: action.payload, isPending: false});\r\n\r\n        case REQUEST_ROBOTS_FAIL:\r\n            return Object.assign({}, state , {error: action.payload, isPending: false});\r\n        \r\n        default :\r\n        return state\r\n    }\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore,applyMiddleware , combineReducers}  from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './Reducers';\r\nimport ThunkMiddleware  from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer= combineReducers({ searchRobots, requestRobots })\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware ,logger))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}